// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: toy.flex

package lexer;

import java.util.*;

import common.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements TokenTypeID {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRINGLITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\2\0\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\3\23"+
    "\4\24\2\25\1\0\1\26\1\27\1\30\1\31\2\0"+
    "\4\32\1\33\1\32\21\34\1\35\2\34\1\36\1\37"+
    "\1\40\1\0\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\34\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\34\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\34\1\71\1\72"+
    "\1\73\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\15\24\1\27\1\1\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\1\2\1\36\1\0\1\37\1\22\1\40"+
    "\10\24\1\41\12\24\1\42\1\43\2\44\1\45\1\46"+
    "\1\47\2\0\1\50\7\24\1\51\1\24\1\52\1\53"+
    "\10\24\1\44\1\0\1\36\4\24\1\54\5\24\1\55"+
    "\4\24\1\56\1\57\2\24\1\60\1\61\2\24\1\62"+
    "\7\24\1\63\1\24\1\64\5\24\1\65\1\66\1\67"+
    "\1\70\1\71\3\24\1\72\2\24\1\73\1\24\1\74"+
    "\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\170\0\170\0\264\0\360\0\170"+
    "\0\170\0\u012c\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\170\0\u0168\0\u01a4\0\u01e0\0\170\0\u021c\0\u0258\0\u0294"+
    "\0\u02d0\0\170\0\170\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\170\0\u0618\0\170\0\u0654\0\170\0\u0690\0\170\0\170"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\170\0\170\0\170\0\u07bc"+
    "\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u02d0"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\170\0\170\0\u0bf4\0\u0c30\0\170\0\170"+
    "\0\170\0\u0c6c\0\u0ca8\0\u0780\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u02d0\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\170"+
    "\0\u111c\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u02d0\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u02d0\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u02d0\0\u02d0\0\u1464\0\u14a0\0\u02d0\0\u02d0\0\u14dc"+
    "\0\u1518\0\u02d0\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u02d0\0\u16f8\0\u02d0\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u1860\0\u189c"+
    "\0\u18d8\0\u02d0\0\u1914\0\u1950\0\u02d0\0\u198c\0\u02d0\0\u02d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\24\1\25\1\26\1\27\1\30"+
    "\4\31\1\32\1\3\1\33\1\3\1\31\1\34\1\35"+
    "\1\36\1\37\1\40\2\31\1\41\3\31\1\42\1\31"+
    "\1\43\1\44\1\45\1\46\1\31\1\47\1\50\2\31"+
    "\1\51\1\52\1\53\2\54\1\3\2\54\1\3\1\54"+
    "\1\55\27\54\1\56\34\54\76\0\1\5\121\0\1\57"+
    "\54\0\1\60\76\0\1\61\4\0\1\62\72\0\1\63"+
    "\1\0\4\24\7\0\1\64\31\0\1\64\24\0\1\63"+
    "\1\0\4\24\76\0\1\65\73\0\1\66\73\0\1\67"+
    "\65\0\4\31\4\0\4\31\3\0\30\31\25\0\4\31"+
    "\4\0\4\31\3\0\16\31\1\70\1\31\1\71\7\31"+
    "\25\0\4\31\4\0\4\31\3\0\13\31\1\72\14\31"+
    "\25\0\4\31\4\0\4\31\3\0\16\31\1\73\11\31"+
    "\25\0\4\31\4\0\4\31\3\0\13\31\1\74\12\31"+
    "\1\75\1\31\25\0\4\31\4\0\4\31\3\0\1\31"+
    "\1\76\14\31\1\77\11\31\25\0\4\31\4\0\4\31"+
    "\3\0\6\31\1\100\5\31\1\101\1\102\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\5\31\1\103\15\31\1\104"+
    "\4\31\25\0\4\31\4\0\4\31\3\0\20\31\1\105"+
    "\7\31\25\0\4\31\4\0\4\31\3\0\5\31\1\106"+
    "\22\31\25\0\4\31\4\0\4\31\3\0\22\31\1\107"+
    "\5\31\25\0\4\31\4\0\4\31\3\0\20\31\1\110"+
    "\7\31\25\0\4\31\4\0\4\31\3\0\16\31\1\111"+
    "\11\31\25\0\4\31\4\0\4\31\3\0\10\31\1\112"+
    "\17\31\75\0\1\113\1\0\2\54\1\0\2\54\1\0"+
    "\1\54\1\0\27\54\1\0\34\54\7\0\1\114\12\0"+
    "\2\115\1\116\31\0\1\117\2\0\1\120\1\0\1\121"+
    "\10\0\14\61\1\122\57\61\2\62\4\0\66\62\22\0"+
    "\4\63\5\0\1\123\12\0\1\123\47\0\4\124\4\0"+
    "\2\124\6\0\6\124\46\0\4\31\4\0\4\31\3\0"+
    "\16\31\1\125\11\31\25\0\4\31\4\0\4\31\3\0"+
    "\5\31\1\126\22\31\25\0\4\31\4\0\4\31\3\0"+
    "\1\31\1\127\26\31\25\0\4\31\4\0\4\31\3\0"+
    "\23\31\1\130\4\31\25\0\4\31\4\0\4\31\3\0"+
    "\21\31\1\131\6\31\25\0\4\31\4\0\4\31\3\0"+
    "\22\31\1\132\5\31\25\0\4\31\4\0\4\31\3\0"+
    "\13\31\1\133\14\31\25\0\4\31\4\0\4\31\3\0"+
    "\20\31\1\134\7\31\25\0\4\31\4\0\4\31\3\0"+
    "\17\31\1\135\10\31\25\0\4\31\4\0\4\31\3\0"+
    "\22\31\1\136\5\31\25\0\4\31\4\0\4\31\3\0"+
    "\25\31\1\137\2\31\25\0\4\31\4\0\4\31\3\0"+
    "\13\31\1\140\14\31\25\0\4\31\4\0\4\31\3\0"+
    "\11\31\1\141\16\31\25\0\4\31\4\0\4\31\3\0"+
    "\1\31\1\142\20\31\1\143\5\31\25\0\4\31\4\0"+
    "\4\31\3\0\20\31\1\144\7\31\25\0\4\31\4\0"+
    "\4\31\3\0\23\31\1\145\4\31\25\0\4\31\4\0"+
    "\4\31\3\0\11\31\1\146\16\31\25\0\4\31\4\0"+
    "\4\31\3\0\11\31\1\147\16\31\25\0\3\116\71\0"+
    "\3\150\47\0\14\61\1\122\4\61\1\4\52\61\15\0"+
    "\1\151\1\0\1\151\2\0\4\152\70\0\4\31\4\0"+
    "\4\31\3\0\13\31\1\153\14\31\25\0\4\31\4\0"+
    "\4\31\3\0\1\31\1\154\26\31\25\0\4\31\4\0"+
    "\4\31\3\0\21\31\1\155\6\31\25\0\4\31\4\0"+
    "\4\31\3\0\2\31\1\156\25\31\25\0\4\31\4\0"+
    "\4\31\3\0\5\31\1\157\22\31\25\0\4\31\4\0"+
    "\4\31\3\0\5\31\1\160\22\31\25\0\4\31\4\0"+
    "\4\31\3\0\21\31\1\161\6\31\25\0\4\31\4\0"+
    "\4\31\3\0\13\31\1\162\14\31\25\0\4\31\4\0"+
    "\4\31\3\0\5\31\1\163\22\31\25\0\4\31\4\0"+
    "\4\31\3\0\1\31\1\164\26\31\25\0\4\31\4\0"+
    "\4\31\3\0\13\31\1\165\14\31\25\0\4\31\4\0"+
    "\4\31\3\0\15\31\1\166\12\31\25\0\4\31\4\0"+
    "\4\31\3\0\4\31\1\167\23\31\25\0\4\31\4\0"+
    "\4\31\3\0\23\31\1\170\4\31\25\0\4\31\4\0"+
    "\4\31\3\0\11\31\1\171\16\31\25\0\4\31\4\0"+
    "\4\31\3\0\5\31\1\172\22\31\25\0\4\31\4\0"+
    "\4\31\3\0\4\31\1\173\23\31\25\0\4\31\4\0"+
    "\4\31\3\0\13\31\1\174\14\31\25\0\4\152\70\0"+
    "\4\31\4\0\4\31\3\0\5\31\1\175\22\31\25\0"+
    "\4\31\4\0\4\31\3\0\12\31\1\176\15\31\25\0"+
    "\4\31\4\0\4\31\3\0\21\31\1\177\6\31\25\0"+
    "\4\31\4\0\4\31\3\0\13\31\1\200\14\31\25\0"+
    "\4\31\4\0\4\31\3\0\15\31\1\201\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\5\31\1\202\22\31\25\0"+
    "\4\31\4\0\4\31\3\0\5\31\1\203\22\31\25\0"+
    "\4\31\4\0\4\31\3\0\20\31\1\204\7\31\25\0"+
    "\4\31\4\0\4\31\3\0\20\31\1\205\7\31\25\0"+
    "\4\31\4\0\4\31\3\0\22\31\1\206\5\31\25\0"+
    "\4\31\4\0\4\31\3\0\13\31\1\207\14\31\25\0"+
    "\4\31\4\0\4\31\3\0\20\31\1\210\7\31\25\0"+
    "\4\31\4\0\4\31\3\0\15\31\1\211\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\5\31\1\212\22\31\25\0"+
    "\4\31\4\0\4\31\3\0\1\31\1\213\26\31\25\0"+
    "\4\31\4\0\4\31\3\0\5\31\1\214\22\31\25\0"+
    "\4\31\4\0\4\31\3\0\4\31\1\215\23\31\25\0"+
    "\4\31\4\0\4\31\3\0\14\31\1\216\13\31\25\0"+
    "\4\31\4\0\4\31\3\0\6\31\1\217\21\31\25\0"+
    "\4\31\4\0\4\31\3\0\20\31\1\220\7\31\25\0"+
    "\4\31\4\0\4\31\3\0\13\31\1\221\14\31\25\0"+
    "\4\31\4\0\4\31\3\0\15\31\1\222\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\15\31\1\223\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\7\31\1\224\20\31\25\0"+
    "\4\31\4\0\4\31\3\0\15\31\1\225\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\21\31\1\226\6\31\25\0"+
    "\4\31\4\0\4\31\3\0\5\31\1\227\22\31\25\0"+
    "\4\31\4\0\4\31\3\0\1\31\1\230\26\31\25\0"+
    "\4\31\4\0\4\31\3\0\1\31\1\231\26\31\25\0"+
    "\4\31\4\0\4\31\3\0\15\31\1\232\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\15\31\1\233\12\31\25\0"+
    "\4\31\4\0\4\31\3\0\3\31\1\234\24\31\25\0"+
    "\4\31\4\0\4\31\3\0\27\31\1\235\25\0\4\31"+
    "\4\0\4\31\3\0\22\31\1\236\5\31\25\0\4\31"+
    "\4\0\4\31\3\0\5\31\1\237\22\31\25\0\4\31"+
    "\4\0\4\31\3\0\21\31\1\240\6\31\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\2\1\2\11\1\1\7\11\3\1\1\11"+
    "\4\1\2\11\15\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\0\2\1\1\0\3\11\23\1\2\11"+
    "\2\1\3\11\2\0\24\1\1\11\1\0\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
// Class for tokens
public static class Token{
	private final int type, line;
	private final String value;

	private Token(int type, String value, int line) {
		this.type = type;
		this.value = value;
		this.line = line;
	}
	
	public static Token build(final int type, final String value, final int line) {
		final Token token = new Token(type, value, line);
		return token;
	}
	
	public static Token build(final int type, final int line){
		return build(type, null, line);
	}

	public String getValue() {
		return value;
	}
	
	public int getLineNumber(){
		return line;
	}

	public String toString() {
		switch(type){
			case _BOOLEAN:
				return "boolean";
			case _BREAK:
				return "break";
			case _CLASS:
				return "class";
			case _DOUBLE:
				return "double";
			case _ELSE:
				return "else";
			case _EXTENDS:
				return "extends";
			case _FOR:
				return "for";
			case _IF:
				return "if";
			case _IMPLEMENTS:
				return "implements";
			case _INT:
				return "int";
			case _INTERFACE:
				return "interface";
			case _NEW:
				return "new";
			case _NEWARRAY:
				return "newarray";
			case _NULL:
				return "null";
			case _PRINTLN:
				return "println";
			case _READLN:
				return "readln";
			case _RETURN:
				return "return";
			case _STRING:
				return "string";
			case _VOID:
				return "void";
			case _WHILE:
				return "while";
			case _PLUS:
				return "plus";
			case _MINUS:
				return "minus";
			case _MULTIPLICATION:
				return "multiplication";
			case _DIVISION:
				return "division";
			case _MOD:
				return "mod";
			case _LESS:
				return "less";
			case _LESSEQUAL:
				return "lessequal";
			case _GREATER:
				return "greater";
			case _GREATEREQUAL:
				return "greaterequal";
			case _EQUAL:
				return "equal";
			case _NOTEQUAL:
				return "notequal";
			case _AND:
				return "and";
			case _OR:
				return "or";
			case _NOT:
				return "not";
			case _ASSIGNOP:
				return "assignop";
			case _SEMICOLON:
				return "semicolon";
			case _COMMA:
				return "comma";
			case _PERIOD:
				return "period";
			case _LEFTPAREN:
				return "leftparen";
			case _RIGHTPAREN:
				return "rightparen";
			case _LEFTBRACKET:
				return "leftbracket";
			case _RIGHTBRACKET:
				return "rightbracket";
			case _LEFTBRACE:
				return "leftbrace";
			case _RIGHTBRACE:
				return "rightbrace";
			case _INTCONSTANT:
				return "intconstant";
			case _DOUBLECONSTANT:
				return "doubleconstant";
			case _STRINGCONSTANT:
				return "stringconstant";
			case _BOOLEANCONSTANT:
				return "booleanconstant";
			case _ID:
				return "id";
			case _ERROR:
				return "error";
			default:
				return "unknown";
		}
	}
}

public Trie<String> symbolTable = new Trie<>(); //String for now, can change later

private boolean done = false, error = false;

private StringBuilder sLiteral = new StringBuilder();

int currentLine = 1;

public boolean isDone(){
	return done;
}

public boolean errorOccurred(){
	return error;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
  	symbolTable.reserve("boolean");
	symbolTable.reserve("break");
	symbolTable.reserve("class");
	symbolTable.reserve("double");
	symbolTable.reserve("else");
	symbolTable.reserve("extends");
	symbolTable.reserve("false");
	symbolTable.reserve("for");
	symbolTable.reserve("if");
	symbolTable.reserve("implements");
	symbolTable.reserve("int");
	symbolTable.reserve("interface");
	symbolTable.reserve("new");
	symbolTable.reserve("newarray");
	symbolTable.reserve("null");
	symbolTable.reserve("println");
	symbolTable.reserve("readln");
	symbolTable.reserve("return");
	symbolTable.reserve("string");
	symbolTable.reserve("true");
	symbolTable.reserve("void");
	symbolTable.reserve("while");
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
	done = true;
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error = true;
									 return Token.build(_ERROR, yytext(), currentLine);
            }
            // fall through
          case 62: break;
          case 2:
            { 
            }
            // fall through
          case 63: break;
          case 3:
            { currentLine++;
            }
            // fall through
          case 64: break;
          case 4:
            { return Token.build(_NOT, currentLine);
            }
            // fall through
          case 65: break;
          case 5:
            { yybegin(STRINGLITERAL);
            }
            // fall through
          case 66: break;
          case 6:
            { return Token.build(_MOD, currentLine);
            }
            // fall through
          case 67: break;
          case 7:
            { return Token.build(_LEFTPAREN, currentLine);
            }
            // fall through
          case 68: break;
          case 8:
            { return Token.build(_RIGHTPAREN, currentLine);
            }
            // fall through
          case 69: break;
          case 9:
            { return Token.build(_MULTIPLICATION, currentLine);
            }
            // fall through
          case 70: break;
          case 10:
            { return Token.build(_PLUS, currentLine);
            }
            // fall through
          case 71: break;
          case 11:
            { return Token.build(_COMMA, currentLine);
            }
            // fall through
          case 72: break;
          case 12:
            { return Token.build(_MINUS, currentLine);
            }
            // fall through
          case 73: break;
          case 13:
            { return Token.build(_PERIOD, currentLine);
            }
            // fall through
          case 74: break;
          case 14:
            { return Token.build(_DIVISION, currentLine);
            }
            // fall through
          case 75: break;
          case 15:
            { return Token.build(_INTCONSTANT, yytext(), currentLine);
            }
            // fall through
          case 76: break;
          case 16:
            { return Token.build(_SEMICOLON, currentLine);
            }
            // fall through
          case 77: break;
          case 17:
            { return Token.build(_LESS, currentLine);
            }
            // fall through
          case 78: break;
          case 18:
            { return Token.build(_EQUAL, currentLine);
            }
            // fall through
          case 79: break;
          case 19:
            { return Token.build(_GREATER, currentLine);
            }
            // fall through
          case 80: break;
          case 20:
            { String s = yytext();
									 symbolTable.reserve(s);
									 return Token.build(_ID, s, currentLine);
            }
            // fall through
          case 81: break;
          case 21:
            { return Token.build(_LEFTBRACKET, currentLine);
            }
            // fall through
          case 82: break;
          case 22:
            { return Token.build(_RIGHTBRACKET, currentLine);
            }
            // fall through
          case 83: break;
          case 23:
            { return Token.build(_LEFTBRACE, currentLine);
            }
            // fall through
          case 84: break;
          case 24:
            { return Token.build(_RIGHTBRACE, currentLine);
            }
            // fall through
          case 85: break;
          case 25:
            { sLiteral.append(yytext());
            }
            // fall through
          case 86: break;
          case 26:
            { String s = sLiteral.toString();
									 sLiteral = new StringBuilder();
									 yybegin(YYINITIAL);
									 return Token.build(_STRINGCONSTANT, s, currentLine);
            }
            // fall through
          case 87: break;
          case 27:
            { sLiteral.append('\\');
            }
            // fall through
          case 88: break;
          case 28:
            { return Token.build(_NOTEQUAL, currentLine);
            }
            // fall through
          case 89: break;
          case 29:
            { return Token.build(_AND, currentLine);
            }
            // fall through
          case 90: break;
          case 30:
            { return Token.build(_DOUBLECONSTANT, yytext(), currentLine);
            }
            // fall through
          case 91: break;
          case 31:
            { return Token.build(_LESSEQUAL, currentLine);
            }
            // fall through
          case 92: break;
          case 32:
            { return Token.build(_GREATEREQUAL, currentLine);
            }
            // fall through
          case 93: break;
          case 33:
            { return Token.build(_IF, currentLine);
            }
            // fall through
          case 94: break;
          case 34:
            { return Token.build(_OR, currentLine);
            }
            // fall through
          case 95: break;
          case 35:
            { sLiteral.append('\"');
            }
            // fall through
          case 96: break;
          case 36:
            { char c = (char)Integer.parseInt(yytext().substring(1), 8);
									 sLiteral.append(c);
            }
            // fall through
          case 97: break;
          case 37:
            { sLiteral.append('\n');
            }
            // fall through
          case 98: break;
          case 38:
            { sLiteral.append('\r');
            }
            // fall through
          case 99: break;
          case 39:
            { sLiteral.append('\t');
            }
            // fall through
          case 100: break;
          case 40:
            { String s = yytext();
									 s = Integer.decode(s).toString();
									 return Token.build(_INTCONSTANT, s, currentLine);
            }
            // fall through
          case 101: break;
          case 41:
            { return Token.build(_FOR, currentLine);
            }
            // fall through
          case 102: break;
          case 42:
            { return Token.build(_INT, currentLine);
            }
            // fall through
          case 103: break;
          case 43:
            { return Token.build(_NEW, currentLine);
            }
            // fall through
          case 104: break;
          case 44:
            { return Token.build(_ELSE, currentLine);
            }
            // fall through
          case 105: break;
          case 45:
            { return Token.build(_NULL, currentLine);
            }
            // fall through
          case 106: break;
          case 46:
            { return Token.build(_BOOLEANCONSTANT, "true", currentLine);
            }
            // fall through
          case 107: break;
          case 47:
            { return Token.build(_VOID, currentLine);
            }
            // fall through
          case 108: break;
          case 48:
            { return Token.build(_BREAK, currentLine);
            }
            // fall through
          case 109: break;
          case 49:
            { return Token.build(_CLASS, currentLine);
            }
            // fall through
          case 110: break;
          case 50:
            { return Token.build(_BOOLEANCONSTANT, "false", currentLine);
            }
            // fall through
          case 111: break;
          case 51:
            { return Token.build(_WHILE, currentLine);
            }
            // fall through
          case 112: break;
          case 52:
            { return Token.build(_DOUBLE, currentLine);
            }
            // fall through
          case 113: break;
          case 53:
            { return Token.build(_READLN, currentLine);
            }
            // fall through
          case 114: break;
          case 54:
            { return Token.build(_RETURN, currentLine);
            }
            // fall through
          case 115: break;
          case 55:
            { return Token.build(_STRING, currentLine);
            }
            // fall through
          case 116: break;
          case 56:
            { return Token.build(_BOOLEAN, currentLine);
            }
            // fall through
          case 117: break;
          case 57:
            { return Token.build(_EXTENDS, currentLine);
            }
            // fall through
          case 118: break;
          case 58:
            { return Token.build(_PRINTLN, currentLine);
            }
            // fall through
          case 119: break;
          case 59:
            { return Token.build(_NEWARRAY, currentLine);
            }
            // fall through
          case 120: break;
          case 60:
            { return Token.build(_INTERFACE, currentLine);
            }
            // fall through
          case 121: break;
          case 61:
            { return Token.build(_IMPLEMENTS, currentLine);
            }
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
